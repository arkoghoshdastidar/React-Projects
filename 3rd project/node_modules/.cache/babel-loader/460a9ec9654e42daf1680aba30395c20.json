{"ast":null,"code":"var _jsxFileName = \"E:\\\\Front-End Development\\\\React\\\\Projects\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\ExpensesChart.js\";\n// {\n//     id: 'e1',\n//     title: 'Toilet Paper',\n//     amount: 94.12,\n//     date: new Date(2020, 7, 14),\n//   }\nimport Chart from '../Chart/Chart';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpensesChart = props => {\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const monthExpenses = [];\n\n  for (let i = 0; i < 12; i++) monthExpenses.push({\n    value: 0,\n    label: months[i]\n  });\n\n  props.expenses.forEach(expense => {\n    if (props.filteredYear == expense.date.getFullYear()) {\n      let monthNum = expense.date.getMonth();\n      monthExpenses[monthNum].value = monthExpenses[monthNum].value + parseInt(expense.amount);\n      if (monthExpenses[monthNum].value > maxValue) setMaxValue(monthExpenses[monthNum].value);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Chart, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }, this);\n};\n\n_c = ExpensesChart;\nexport default ExpensesChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesChart\");","map":{"version":3,"names":["Chart","useState","ExpensesChart","props","months","monthExpenses","i","push","value","label","expenses","forEach","expense","filteredYear","date","getFullYear","monthNum","getMonth","parseInt","amount","maxValue","setMaxValue"],"sources":["E:/Front-End Development/React/Projects/01-starting-setup/src/components/Expenses/ExpensesChart.js"],"sourcesContent":["// {\r\n//     id: 'e1',\r\n//     title: 'Toilet Paper',\r\n//     amount: 94.12,\r\n//     date: new Date(2020, 7, 14),\r\n//   }\r\nimport Chart from '../Chart/Chart';\r\nimport { useState } from 'react';\r\n\r\nconst ExpensesChart = props => {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const monthExpenses = [];\r\n    for (let i = 0; i < 12; i++) monthExpenses.push({ value: 0, label: months[i] });\r\n    props.expenses.forEach((expense) => {\r\n        if (props.filteredYear == expense.date.getFullYear()) {\r\n            let monthNum = expense.date.getMonth();\r\n            monthExpenses[monthNum].value = monthExpenses[monthNum].value + parseInt(expense.amount);\r\n            if (monthExpenses[monthNum].value > maxValue) setMaxValue(monthExpenses[monthNum].value);\r\n        }\r\n    })\r\n    return (<Chart></Chart>);\r\n}\r\n\r\nexport default ExpensesChart;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;EAC3B,MAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAf;EACA,MAAMC,aAAa,GAAG,EAAtB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6BD,aAAa,CAACE,IAAd,CAAmB;IAAEC,KAAK,EAAE,CAAT;IAAYC,KAAK,EAAEL,MAAM,CAACE,CAAD;EAAzB,CAAnB;;EAC7BH,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAwBC,OAAD,IAAa;IAChC,IAAIT,KAAK,CAACU,YAAN,IAAsBD,OAAO,CAACE,IAAR,CAAaC,WAAb,EAA1B,EAAsD;MAClD,IAAIC,QAAQ,GAAGJ,OAAO,CAACE,IAAR,CAAaG,QAAb,EAAf;MACAZ,aAAa,CAACW,QAAD,CAAb,CAAwBR,KAAxB,GAAgCH,aAAa,CAACW,QAAD,CAAb,CAAwBR,KAAxB,GAAgCU,QAAQ,CAACN,OAAO,CAACO,MAAT,CAAxE;MACA,IAAId,aAAa,CAACW,QAAD,CAAb,CAAwBR,KAAxB,GAAgCY,QAApC,EAA8CC,WAAW,CAAChB,aAAa,CAACW,QAAD,CAAb,CAAwBR,KAAzB,CAAX;IACjD;EACJ,CAND;EAOA,oBAAQ,QAAC,KAAD;IAAA;IAAA;IAAA;EAAA,QAAR;AACH,CAZD;;KAAMN,a;AAcN,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}